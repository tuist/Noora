name: Release CLI

on:
  push:
    branches:
      - main
    paths:
      - "cli/**"
      - ".github/workflows/release-cli.yml"
  workflow_dispatch:
    inputs:
      version:
        description: "The version to release"
        type: string

permissions:
  contents: write
  pull-requests: read
  statuses: write
  packages: write

jobs:
  release-cli:
    name: Release CLI
    runs-on: "ubuntu-latest"
    timeout-minutes: 15
    if: "!startsWith(github.event.head_commit.message, '[Release]')"
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
      - uses: jdx/mise-action@v2
        with:
          experimental: true
      - name: Check for CLI changes since last release
        id: check-changes
        run: |
          # Check if there are any commits affecting the CLI package since the last CLI release
          # CLI accepts both old unprefixed tags (e.g., "1.2.3") and new prefixed tags (e.g., "cli-1.2.3")
          LAST_CLI_TAG=$(git tag -l | grep -E '^(cli-[0-9]+\.[0-9]+\.[0-9]+|[0-9]+\.[0-9]+\.[0-9]+)$' | grep -v '^web-' | sort -V | tail -n 1)
          if [ -z "$LAST_CLI_TAG" ]; then
            echo "No previous CLI releases found, will release"
            echo "has-changes=true" >> $GITHUB_OUTPUT
          else
            if git diff --name-only ${LAST_CLI_TAG}..HEAD | grep -E '^cli/' > /dev/null; then
              echo "CLI changes found since $LAST_CLI_TAG"
              echo "has-changes=true" >> $GITHUB_OUTPUT
            else
              echo "No CLI changes since $LAST_CLI_TAG"
              echo "has-changes=false" >> $GITHUB_OUTPUT
            fi
          fi
      - name: Get next version
        id: next-version
        if: steps.check-changes.outputs.has-changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEXT_VERSION=$(git cliff --config cli/cliff.toml --include-path cli/** --bumped-version)
          echo "NEXT_VERSION=$NEXT_VERSION" >> "$GITHUB_OUTPUT"
          echo "Next CLI version will be: $NEXT_VERSION"
      - name: Update CHANGELOG.md
        if: steps.check-changes.outputs.has-changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: git cliff --config cli/cliff.toml --include-path cli/** --bump -o cli/CHANGELOG.md
      - name: Get release notes
        id: release-notes
        if: steps.check-changes.outputs.has-changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "RELEASE_NOTES<<EOF" >> "$GITHUB_OUTPUT"
          git cliff --config cli/cliff.toml --include-path cli/** --latest >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
      - name: Commit changes
        id: auto-commit-action
        uses: stefanzweifel/git-auto-commit-action@v5
        if: steps.check-changes.outputs.has-changes == 'true'
        with:
          commit_options: "--allow-empty"
          tagging_message: cli-${{ steps.next-version.outputs.NEXT_VERSION }}
          skip_dirty_check: true
          commit_message: "[Release] Noora CLI ${{ steps.next-version.outputs.NEXT_VERSION }}"
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: steps.check-changes.outputs.has-changes == 'true'
        with:
          draft: false
          repository: tuist/Noora
          name: CLI ${{ steps.next-version.outputs.NEXT_VERSION }}
          tag_name: cli-${{ steps.next-version.outputs.NEXT_VERSION }}
          body: ${{ steps.release-notes.outputs.RELEASE_NOTES }}
          target_commitish: ${{ steps.auto-commit-action.outputs.commit_hash }}

